snippet f
	function (${1}) {
		${2}
	}
snippet fi
	function (${1}) { ${2} }
snippet fn
	function ${1}(${2}) {
		${3}
	}
snippet fc
	(function (${2}) {
		${1}
	})(${3})
snippet if
	if (${1}) {
		${2}
	}
snippet ife
	if (${1}) {
		${2}
	} else {
		${3}
	}
snippet else
	else {
		${1}
	}
snippet iffe
	if (${1}) {
		${2}
	} else if (${3}) {
		${4}
	} else {
		${5}
	}
snippet elif
	else if (${1}) {
		${2}
	}
snippet elifn
	else if ( ! ${1}) {
		${2}
	}
snippet elifn.
	else if ( ! (${1})) {
		${2}
	}
snippet ifn
	if ( ! ${1}) {
		${2}
	}
snippet ifn.
	if ( ! (${1})) {
		${2}
	}
snippet ifne
	if ( ! ${1}) {
		${2}
	} else {
		${3}
	}
snippet ifne.
	if ( ! (${1})) {
		${2}
	} else {
		${3}
	}
snippet -a
	[${1}]
snippet -o
	{ ${1}: ${2} }
snippet .e
	.forEach(function (${1:item}) {
		${2}
	})
snippet .m
	.map(function (${1:item}) {
		return ${2:item};
	})
snippet .r
	.reduce(function (${1:prev}, ${2:next}) {
		return ${4:prev} + ${5:next};
	})
snippet .rr
	.reduceRight(function (${1:prev}, ${2:next}) {
		return ${4:prev} + ${5:next};
	})
snippet .ro
	.reduce(function (${1:obj}, ${2:item}) {
		${3}
		return ${4:obj};
	}, {})
snippet .rv
	.reverse()
snippet .sm
	.some(function (${1:item}) {
		return ${2:item};
	})
snippet .ev
	.every(function (${1:item}) {
		return ${2:item};
	})
snippet .fl
	.filter(function (${1:item}) {
		return ${2:item};
	})
snippet +
	.push(${1})
snippet ++
	.concat(${1:[]})
snippet .sp
	.splice(${1:0}, ${2:1})
snippet .iof
	.indexOf(${1})
snippet .ca
	.charAt(${1})
snippet .ts
	.toString()
snippet ..,
	.${1}(${2})
snippet .apply
	.apply(${1:this}, ${2:arguments})
snippet ...
	.apply(${1:this}, ${2:arguments})
snippet .call
	.call(${1:this})
snippet ..=
	.call(${1:this})
snippet .bind
	.bind(${1:this})
snippet ok
	Object.keys(${1})
snippet oc
	Object.create(${1})
snippet isa
	Array.isArray(${1})
snippet -io
	${1} instanceof ${2:Object}
snippet io
	instanceof ${1:Object}
snippet to
	setTimeout(function () {
		${1}
	}, ${2:0});
snippet nt
	process.nextTick(${1});
snippet ntf
	process.nextTick(function () {
		${1}
	});
snippet dn
	Date.now()
snippet nd
	new Date()
snippet ne
	new Error('${1}')
snippet te
	throw new Error('${1}');
snippet tt
	throw ${1};
snippet tt-
	throw ${1}
snippet -v
	var ${1:foo} = ${2};
snippet -v-
	var ${1:foo};
snippet -r
	return ${1};
snippet -r-
	return ${1}
snippet -R
	return;
snippet -R-
	return
snippet tof
	typeof ${1}
snippet map
	var map = {
		${2:foo}: function () {
			${3}
		},
		${4:bar}: function () {
			${5}
		},
		otherwise: function () {
			${6}
		}
	}, f = map[${1:x}];
	f ? f() : map.otherwise();
snippet dg
	debugger;
snippet cl
	console.log(${1});
snippet ci
	console.info(${1});
snippet cw
	console.warn(${1});
snippet ce
	console.error(${1});
snippet cd
	console.debug(${1});
snippet cg
	console.group('${1}');
snippet cge
	console.groupEnd('${1}');
snippet ct
	console.time('${1}');
snippet cte
	console.timeEnd('${1}');
snippet cp
	console.profile('${1}');
snippet cpe
	console.profileEnd('${1}');
snippet ca
	console.assert(${1}, '${2}');
snippet !.
	 ! (${1})
snippet !
	 ! ${1}
snippet ::
	.prototype.
snippet @
	this.${1}
snippet .*
	.join('${1}')
snippet ./
	.split('${1}')
snippet //
	/**
	 * ${1:Description.}
	 *
	 * ${2:@public}
	 */
snippet '
	'${1}'
snippet "
	"${1}"
snippet {
	{${1}}
snippet [
	[${1}]
snippet (
	(${1})
