priority -50

snippet f "Anonymous function" i
function (${1}) {
	${2}
}
endsnippet

snippet fi "Inline anonymous function" i
function (${1}) { ${2} }
endsnippet

snippet fn "Named function" i
function ${1}(${2}) {
	${3}
}
endsnippet

snippet fc "Clojure function" i
(function (${2}) {
	${1}
})(${3})
endsnippet

snippet if "if condition" i
if (${1}) {
	${2}
}
endsnippet

snippet ife "if/else condition" i
if (${1}) {
	${2}
} else {
	${3}
}
endsnippet

snippet else "else condition continuation" i
else {
	${1}
}
endsnippet

snippet iffe "if/else if/else condition" i
if (${1}) {
	${2}
} else if (${3}) {
	${4}
} else {
	${5}
}
endsnippet

snippet elif "else if condition continuation" i
else if (${1}) {
	${2}
}
endsnippet

snippet elifn "else if inverted condition continuation" i
else if ( ! ${1}) {
	${2}
}
endsnippet

snippet elifn. "else if inverted condition continuation with brackets" i
else if ( ! (${1})) {
	${2}
}
endsnippet

snippet ifn "if inverted condition" i
if ( ! ${1}) {
	${2}
}
endsnippet

snippet ifn. "if inverted condition with brackets" i
if ( ! (${1})) {
	${2}
}
endsnippet

snippet ifne "if/else inverted condition" i
if ( ! ${1}) {
	${2}
} else {
	${3}
}
endsnippet

snippet ifne. "if/else inverted condition with brackets" i
if ( ! (${1})) {
	${2}
} else {
	${3}
}
endsnippet

snippet -o "Simple key-value object" i
{ ${1}: ${2} }
endsnippet

snippet .e "List each method" i
.forEach(function (${1:item}) {
	${2}
})
endsnippet

snippet .m "List map method" i
.map(function (${1:item}) {
	return ${2:item};
})
endsnippet

snippet .r "List reduce method" i
.reduce(function (${1:prev}, ${2:next}) {
	return ${4:prev} + ${5:next};
})
endsnippet

snippet .rr "List reduce right method" i
.reduceRight(function (${1:prev}, ${2:next}) {
	return ${4:prev} + ${5:next};
})
endsnippet

snippet .ro "Reduce to object method" i
.reduce(function (${1:obj}, ${2:item}) {
	${3}
	return ${4:obj};
}, {})
endsnippet

snippet .ra "Reduce to new list method" i
.reduce(function (${1:result}, ${2:item}) {
	return ${3:result}.concat(${4:item});
}, ${5:[]})
endsnippet

snippet .rv "List reverse method" i
.reverse()
endsnippet

snippet .sm ".some() list method" i
.some(function (${1:item}) {
	return ${2:item};
})
endsnippet

snippet .ev ".every() list method" i
.every(function (${1:item}) {
	return ${2:item};
})
endsnippet

snippet .fl "List filter method" i
.filter(function (${1:item}) {
	return ${2:item};
})
endsnippet

snippet +. "Push to list method" i
.push(${1})
endsnippet

snippet ++ "List concat method" i
.concat(${1:[]})
endsnippet

snippet .sp "Splice method" i
.splice(${1:0}, ${2:1})
endsnippet

snippet .iof "Index of method" i
.indexOf(${1})
endsnippet

snippet .ca "Chat at method" i
.charAt(${1})
endsnippet

snippet .ts "To string method" i
.toString()
endsnippet

snippet .., "Call method" i
.${1}(${2})
endsnippet

snippet ... "Function delegate method" i
.apply(${1:this}, ${2:arguments})
endsnippet

snippet ..= "Function call with context" i
.call(${1:this})
endsnippet

snippet .b "Bind method" i
.bind(${1:this})
endsnippet

snippet ok "Get keys list of hash-map" i
Object.keys(${1})
endsnippet

snippet oc "Create hash-map" i
Object.create(${1})
endsnippet

snippet isa "Check if is array" i
Array.isArray(${1})
endsnippet

snippet -io "Something instance of" i
${1} instanceof ${2:Object}
endsnippet

snippet io "Is instance of" i
instanceof ${1:Object}
endsnippet

snippet to "setTimeout (async hack)" i
setTimeout(function () {
	${1}
}, ${2:0});
endsnippet

snippet nt "Async call (node.js)" i
process.nextTick(${1});
endsnippet

snippet ntf "Async wrap (node.js)" i
process.nextTick(function () {
	${1}
});
endsnippet

snippet dn "Current unix-time seconds" i
Date.now()
endsnippet

snippet nd "New instance of Date object" i
new Date()
endsnippet

snippet ne "New exception instance" i
new Error('${1}')
endsnippet

snippet te "Throw new exception instance" i
throw new Error('${1}');
endsnippet

snippet tt "Throw something" i
throw ${1};
endsnippet

snippet tt- "Throw something (without semicolon)" i
throw ${1}
endsnippet

snippet -v "Variable definition with value" i
var ${1:foo} = ${2};
endsnippet

snippet -v- "Variable definition without value" i
var ${1:foo};
endsnippet

snippet -V "Variable definition without value and without semicolon" i
var ${1:foo}
endsnippet

snippet -r "Return value" i
return ${1};
endsnippet

snippet -r- "Return value without semicolon" i
return ${1}
endsnippet

snippet -R "Function break" i
return;
endsnippet

snippet -R- "Function break without semicolon" i
return
endsnippet

snippet tof "Get type of something" i
typeof ${1}
endsnippet

snippet map "Function hash-map with otherwise" i
var map = {
	${2:foo}: function () {
		${3}
	},
	${4:bar}: function () {
		${5}
	},
	otherwise: function () {
		${6}
	}
}, f = map[${1:x}];
f ? f() : map.otherwise();
endsnippet

snippet dg "Call debugger" i
debugger;
endsnippet

snippet cl "console.log" i
console.log(${1});
endsnippet

snippet ci "console.info" i
console.info(${1});
endsnippet

snippet cw "console.warn" i
console.warn(${1});
endsnippet

snippet ce "console.error" i
console.error(${1});
endsnippet

snippet cd "console.debug" i
console.debug(${1});
endsnippet

snippet cg "console.group" i
console.group('${1}');
endsnippet

snippet cge "console.groupEnd" i
console.groupEnd('${1}');
endsnippet

snippet ct "console.time (benchmark)" i
console.time('${1}');
endsnippet

snippet cte "console.timeEnd (benchmark)" i
console.timeEnd('${1}');
endsnippet

snippet cp "console.profile" i
console.profile('${1}');
endsnippet

snippet cpe "console.profileEnd" i
console.profileEnd('${1}');
endsnippet

snippet ca "console.assert" i
console.assert(${1}, '${2}');
endsnippet

snippet !. "Inverted boolean value with brackets" i
 ! (${1})
endsnippet

snippet ! "Inverted boolean value" i
 ! ${1}
endsnippet

snippet :: "Prototype method or property" i
.prototype.
endsnippet

snippet @ "Current context method or property" i
this.${1}
endsnippet

snippet .* "Join string" i
.join('${1}')
endsnippet

snippet ./ "Split string" i
.split('${1}')
endsnippet

snippet // "JSDoc comment" i
/**
 * ${1:Description.}
 *
 * ${2:@public}
 */
endsnippet

snippet try "try/catch" i
try {
	${1}
} catch (e) {
	${2}
}
endsnippet
